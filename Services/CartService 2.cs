using EcommerceAPI.Data;
using EcommerceAPI.DTOs;
using EcommerceAPI.Models;
using Microsoft.EntityFrameworkCore;

namespace EcommerceAPI.Services
{
    public class CartService : ICartService
    {
        private readonly EcommerceDbContext _context;

        public CartService(EcommerceDbContext context)
        {
            _context = context;
        }

        // Get all carts
        public async Task<IEnumerable<CartDTO>> GetCarts()
        {
            try
            {
                var carts = await _context.Carts
                    .Include(c => c.CartItems)
                    .ToListAsync();

                return carts.Select(c => new CartDTO
                {
                    UserId = c.UserId,
                    Items = c.CartItems.Select(i => new CartItemDTO 
                    {
                        ProductId = i.ProductId,
                        Quantity = i.Quantity
                    }).ToList()
                }).ToList();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in GetCarts: {ex.Message}");
                return new List<CartDTO>();
            }
        }

        // Get a single cart by ID
        public async Task<CartDTO?> GetCartById(int id)
        {
            try
            {
                var cart = await _context.Carts
                    .Include(c => c.CartItems)
                    .FirstOrDefaultAsync(c => c.Id == id);

                if (cart == null) return null;

                return new CartDTO
                {
                    UserId = cart.UserId,
                    Items = cart.CartItems.Select(i => new CartItemDTO
                    {
                        ProductId = i.ProductId,
                        Quantity = i.Quantity
                    }).ToList()
                };
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in GetCartById: {ex.Message}");
                return null;
            }
        }

        // Add a new cart (ID is automatically generated by the database)
        public async Task<CartDTO> AddCart(CartDTO cartDto)
        {
            try
            {
                // âœ… Create a new cart
                var newCart = new Cart
                {
                    UserId = cartDto.UserId,
                    CartItems = cartDto.Items.Select(i => new CartItem
                    {
                        ProductId = i.ProductId,
                        Quantity = i.Quantity
                    }).ToList() //  Convert DTO items into CartItem entities
                };

                _context.Carts.Add(newCart);
                await _context.SaveChangesAsync(); // This generates the `Id`

                // Return the created cart with the generated ID
                return new CartDTO
                {
                    Id = newCart.Id, 
                    UserId = newCart.UserId,
                    Items = newCart.CartItems.Select(i => new CartItemDTO
                    {
                        ProductId = i.ProductId,
                        Quantity = i.Quantity
                    }).ToList()
                };
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in AddCart: {ex.Message}");
                throw;
            }
        }


        // Delete a cart by ID
        public async Task<bool> DeleteCart(int id)
        {
            try
            {
                var cart = await _context.Carts.FindAsync(id);
                if (cart == null) return false;

                _context.Carts.Remove(cart);
                await _context.SaveChangesAsync();

                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in DeleteCart: {ex.Message}");
                return false;
            }
        }
    }
}
